{"version":3,"sources":["styled_components/Subtitle.ts","styled_components/Table.ts","styled_components/Title.ts","dice/Dice.ts","character_generation/Gear.ts","character_generation/Character.ts","context/CharacterContext.tsx","components/Abilities/Abilities.tsx","fonts/Sebaldus-Gotisch.woff","fonts/Sebaldus-Gotisch.woff2","fonts/fonts.ts","components/Shell.tsx","components/Items/Items.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Subtitle","styled","h2","displayName","StyledTable","table","Title","h1","Dice","roll","dieSize","numberOfDice","rolls","Array","fill","undefined","map","randomNumber","reduce","acc","curr","max","Math","floor","random","Gear","itemSlots","items","armor","weapon","itemSlotsUsed","getRandomArmor","slotsRemaining","availableArmor","armorList","filter","slots","getRandomItem","getRandomWeapon","availableWeapons","weaponList","list","length","this","getRandomGear","dg","gearList","gen1","gen2","dungeoneeringGear","el","generalGear1","generalGear2","name","count","type","Character","copperPieces","gender","level","maxHp","abilities","generate","generateAbilities","rollForCopperPieces","randomGender","constitution","defense","rollHitPoints","gear","rollAbilityScore","charisma","dexterity","intelligence","strength","wisdom","bonus","min","genders","quality","damage","hand","CharacterContext","React","createContext","character","AbilityRow","props","label","lowerCaseLabel","toLowerCase","role","Abilities","abilityScores","useContext","Table","createGlobalStyle","SebaldusGotischWOFF","SebaldusGotischWOFF2","Shell","children","charContext","Provider","value","ItemRow","item","kebabCaseName","split","join","Items","maxItemSlots","idx","Layout","div","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fa3c79d.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nconst Subtitle = styled.h2`\n  font-family: SebaldusGotisch;\n  font-size: 2em;\n  font-weight: normal;\n  color: black;\n`\n\nSubtitle.displayName = \"Subtitle\"\n\nexport default Subtitle\n","import styled from \"styled-components\"\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  width: 50%;\n  table-layout: fixed;\n\n  thead tr {\n    background: black;\n    color: white;\n  }\n\n  thead th {\n    padding: 0.5em 0;\n  }\n\n  tr:nth-child(even) {\n    background: #dbdbdb;\n  }\n\n  td,\n  th {\n    padding: 0.5em 0;\n    text-align: center;\n  }\n\n  @media screen and (max-width: 800px) {\n    width: 100%;\n  }\n`\n\nStyledTable.displayName = \"StyledTable\"\n\nexport default StyledTable\n","import styled from \"styled-components\"\n\nconst Title = styled.h1`\n  font-family: SebaldusGotisch;\n  font-size: 3em;\n  font-weight: normal;\n  color: black;\n`\n\nTitle.displayName = \"Title\"\n\nexport default Title\n","class Dice {\n  public static roll = (dieSize: number, numberOfDice: number = 1): number => {\n    const rolls = new Array(numberOfDice)\n      .fill(undefined)\n      .map(() => Dice.randomNumber(dieSize));\n\n    return rolls.reduce((acc, curr) => acc + curr, 0);\n  };\n\n  private static randomNumber = (max: number): number => {\n    return Math.floor(Math.random() * max + 1);\n  };\n}\n\nexport default Dice;\n","import * as armorList from \"character_generation/data/armor.json\"\nimport * as gearList from \"character_generation/data/gear.json\"\nimport * as weaponList from \"character_generation/data/weapons.json\"\n\nclass Gear {\n  public itemSlots: number\n  public items: IGear[]\n  public armor: IArmor\n  public weapon: IWeapon\n  private itemSlotsUsed: number\n\n  constructor(itemSlots: number) {\n    // Order matters! this.getRandomGear must be last\n    this.itemSlots = itemSlots\n    this.itemSlotsUsed = 6\n    this.armor = this.getRandomArmor()\n    this.weapon = this.getRandomWeapon()\n    this.items = this.getRandomGear()\n  }\n\n  private getRandomArmor = (): IArmor => {\n    const slotsRemaining = this.itemSlots - this.itemSlotsUsed\n\n    const availableArmor = (armorList.armor as IArmor[]).filter(armor => {\n      // Ensures there is at least 1 slot remaining for a weapon to be added\n      return armor.slots < slotsRemaining\n    })\n    const armor = this.getRandomItem(availableArmor)\n    this.itemSlotsUsed += armor.slots\n    return armor\n  }\n\n  private getRandomWeapon = (): IWeapon => {\n    const slotsRemaining = this.itemSlots - this.itemSlotsUsed\n    const availableWeapons = (weaponList.weapons as IWeapon[]).filter(\n      weapon => {\n        return weapon.slots <= slotsRemaining\n      }\n    )\n    const weapon = this.getRandomItem(availableWeapons)\n    this.itemSlotsUsed += weapon.slots\n    return weapon\n  }\n\n  private getRandomGear(): IGear[] {\n    const dg = gearList.dungeoneeringGear as IGear[]\n    const gen1 = gearList.generalGearSetOne as IGear[]\n    const gen2 = gearList.generalGearSetTwo as IGear[]\n\n    const startingGear: IGear[] = [\n      { name: \"rations\", count: 1, slots: 1, type: \"food\" },\n      { name: \"rations\", count: 1, slots: 1, type: \"food\" },\n    ]\n\n    const dungeoneeringGear: IGear[] = new Array(2)\n      .fill(undefined)\n      .map(el => this.getRandomItem(dg))\n\n    const generalGear1 = this.getRandomItem(gen1)\n    const generalGear2 = this.getRandomItem(gen2)\n\n    // TODO: refactor so this isn't dependent on getRandomArmor being called first in the constructor\n    return [\n      ...startingGear,\n      ...dungeoneeringGear,\n      generalGear1,\n      generalGear2,\n      this.armor,\n      this.weapon,\n    ]\n  }\n\n  private getRandomItem = <T>(list: T[]): T => {\n    const length = list.length\n    const randomIndex = Math.floor(Math.random() * length)\n    return list[randomIndex]\n  }\n}\n\nexport default Gear\n","import Dice from \"dice/Dice\"\nimport Gear from \"./Gear\"\n\nclass Character {\n  public armor: IArmor\n  public copperPieces: number\n  public gender: IGender\n  public items: IGear[]\n  public itemSlots: number\n  public level: number\n  public maxHp: number\n  public weapon: IWeapon\n\n  private abilities: IAbilities\n\n  constructor() {\n    this.abilities = {\n      charisma: { bonus: 3, defense: 13 },\n      constitution: { bonus: 3, defense: 13 },\n      dexterity: { bonus: 3, defense: 13 },\n      intelligence: { bonus: 3, defense: 13 },\n      strength: { bonus: 3, defense: 13 },\n      wisdom: { bonus: 3, defense: 13 },\n    }\n\n    this.armor = {\n      count: 0,\n      defense: 0,\n      name: \"\",\n      quality: 0,\n      slots: 0,\n      type: \"armor\",\n    }\n    this.copperPieces = 0\n    this.gender = \"non-binary\"\n    this.items = [{ name: \"\", count: 0, type: \"food\", slots: 0 }]\n    this.itemSlots = 0\n    this.level = 0\n    this.maxHp = 0\n    this.weapon = {\n      count: 1,\n      damage: \"d6\",\n      hand: 1,\n      name: \"\",\n      quality: 0,\n      slots: 1,\n      type: \"weapon\",\n    }\n  }\n\n  public generate = (): void => {\n    this.level = 1\n    this.abilities = this.generateAbilities()\n    this.copperPieces = this.rollForCopperPieces()\n    this.gender = this.randomGender()\n    this.itemSlots = this.constitution.defense\n    this.maxHp = this.rollHitPoints()\n\n    const gear = new Gear(this.itemSlots)\n\n    this.items = gear.items\n    this.armor = gear.armor\n    this.weapon = gear.weapon\n  }\n\n  public get abilityScores() {\n    return this.abilities\n  }\n\n  public get charisma() {\n    return this.abilities.charisma\n  }\n\n  public get constitution() {\n    return this.abilities.constitution\n  }\n\n  public get dexterity() {\n    return this.abilities.dexterity\n  }\n\n  public get intelligence() {\n    return this.abilities.intelligence\n  }\n\n  public get strength() {\n    return this.abilities.strength\n  }\n\n  public get wisdom() {\n    return this.abilities.wisdom\n  }\n\n  // END PUBLIC METHODS\n\n  private rollForCopperPieces = () => {\n    return Dice.roll(6, 3) + 20\n  }\n\n  private rollHitPoints = () => {\n    return Dice.roll(8)\n  }\n\n  private generateAbilities = (): IAbilities => {\n    const [charisma, constitution, dexterity, intelligence, strength, wisdom] =\n      Array(6).fill(undefined).map(this.rollAbilityScore)\n\n    const abilities = {\n      charisma: { bonus: charisma, defense: charisma + 10 },\n      constitution: { bonus: constitution, defense: constitution + 10 },\n      dexterity: { bonus: dexterity, defense: dexterity + 10 },\n      intelligence: { bonus: intelligence, defense: intelligence + 10 },\n      strength: { bonus: strength, defense: strength + 10 },\n      wisdom: { bonus: wisdom, defense: wisdom + 10 },\n    }\n\n    return abilities\n  }\n\n  private rollAbilityScore = (): number => {\n    const rolls = new Array(3).fill(undefined).map(() => Dice.roll(6))\n    return Math.min(...rolls)\n  }\n\n  private randomGender = (): IGender => {\n    const genders: IGender[] = [\n      \"cis-male\",\n      \"cis-female\",\n      \"non-binary\",\n      \"transgender\",\n      \"two-spirit\",\n      \"genderqueer\",\n      \"gender-fluid\",\n      \"gender-neutral\",\n    ]\n\n    // TODO: Use `getRandomItem` (currently in gear class. move to utils?)\n    return genders[Math.floor(Math.random() * genders.length)]\n  }\n}\n\nexport default Character\n","import React from \"react\";\nimport Character from \"character_generation/Character\";\n\nexport interface ICharacterContext {\n  character: Character;\n}\n\nconst CharacterContext = React.createContext<ICharacterContext>({\n  character: new Character(),\n});\n\nexport default CharacterContext;\n","import React, { useContext } from \"react\"\nimport { Subtitle, Table } from \"styled_components\"\nimport CharacterContext from \"context/CharacterContext\"\n\nconst Abilities: React.FC = () => {\n  const context = useContext(CharacterContext)\n  const { character } = context\n  const abilityScores: IAbilities = character.abilityScores\n\n  const { charisma, constitution, dexterity, intelligence, strength, wisdom } =\n    abilityScores\n\n  return (\n    <>\n      <Subtitle>Ability Scores</Subtitle>\n      <Table>\n        <thead>\n          <tr role=\"row\">\n            <th role=\"cell\">Defense</th>\n            <th role=\"cell\">Ability</th>\n            <th role=\"cell\">Bonus</th>\n          </tr>\n        </thead>\n        <tbody>\n          <AbilityRow\n            label=\"STR\"\n            bonus={strength.bonus}\n            defense={strength.defense}\n          />\n          <AbilityRow\n            label=\"DEX\"\n            bonus={dexterity.bonus}\n            defense={dexterity.defense}\n          />\n          <AbilityRow\n            label=\"CON\"\n            bonus={constitution.bonus}\n            defense={constitution.defense}\n          />\n          <AbilityRow\n            label=\"INT\"\n            bonus={intelligence.bonus}\n            defense={intelligence.defense}\n          />\n          <AbilityRow\n            label=\"WIS\"\n            bonus={wisdom.bonus}\n            defense={wisdom.defense}\n          />\n          <AbilityRow\n            label=\"CHA\"\n            bonus={charisma.bonus}\n            defense={charisma.defense}\n          />\n        </tbody>\n      </Table>\n    </>\n  )\n}\n\ninterface IAbilityRowProps {\n  defense: number\n  label: string\n  bonus: number\n}\n\nconst AbilityRow = (props: IAbilityRowProps) => {\n  const { bonus, defense, label } = props\n  const lowerCaseLabel = label.toLowerCase()\n\n  return (\n    <tr data-testid={`${lowerCaseLabel}-row`} role=\"row\">\n      <td role=\"cell\">{defense}</td>\n      <th role=\"cell\">{label}</th>\n      <td role=\"cell\">{bonus}</td>\n    </tr>\n  )\n}\n\nexport default Abilities\n","export default __webpack_public_path__ + \"static/media/Sebaldus-Gotisch.b7fba9af.woff\";","export default __webpack_public_path__ + \"static/media/Sebaldus-Gotisch.4bb1e1aa.woff2\";","import { createGlobalStyle } from \"styled-components\"\n\nimport SebaldusGotischWOFF from \"./Sebaldus-Gotisch.woff\"\nimport SebaldusGotischWOFF2 from \"./Sebaldus-Gotisch.woff2\"\n\nexport default createGlobalStyle`\n    @font-face {\n        font-family: 'SebaldusGotisch';\n        src: local('SebaldusGotisch'), local('SebaldusGotisch'),\n        url(${SebaldusGotischWOFF}) format('woff2'),\n        url(${SebaldusGotischWOFF2}) format('woff');\n        font-weight: 300;\n        font-style: normal;\n    }\n`\n","import React from \"react\"\n\nimport Character from \"character_generation/Character\"\nimport CharacterContext, { ICharacterContext } from \"context/CharacterContext\"\nimport GlobalFonts from \"fonts/fonts\"\n\ninterface IProps {\n  character: Character\n  children: React.ReactElement<unknown>\n}\n\nconst Shell: React.FC<IProps> = ({ character, children }) => {\n  const charContext: ICharacterContext = {\n    character,\n  }\n\n  return (\n    <CharacterContext.Provider value={charContext}>\n      <GlobalFonts />\n      {children}\n    </CharacterContext.Provider>\n  )\n}\n\nexport default Shell\n","import CharacterContext from \"context/CharacterContext\"\nimport React, { useContext } from \"react\"\nimport { Subtitle, Table } from \"styled_components\"\n\nconst Items: React.FC = () => {\n  const context = useContext(CharacterContext)\n  const { character } = context\n  const { items } = character\n  const maxItemSlots = character.itemSlots\n  const itemSlotsUsed = character.items.reduce(\n    (acc, curr) => acc + curr.slots,\n    0\n  )\n\n  return (\n    <>\n      <Subtitle>Items</Subtitle>\n      <p data-testid=\"item-slots-used\">\n        {`Item Slots Used: ${itemSlotsUsed}/${maxItemSlots}`}\n      </p>\n      <Table data-testid=\"item-table\">\n        <thead>\n          <tr role=\"row\">\n            <th role=\"cell\" data-testid=\"item-name-heading\">\n              Item\n            </th>\n            <th role=\"cell\" data-testid=\"item-defense-heading\">\n              Defense\n            </th>\n            <th role=\"cell\" data-testid=\"item-damage-heading\">\n              Damage\n            </th>\n            <th role=\"cell\" data-testid=\"item-slots-heading\">\n              Slots\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {items.map((item: any, idx) => (\n            <ItemRow item={item} key={item.name + idx} />\n          ))}\n        </tbody>\n      </Table>\n    </>\n  )\n}\n\ninterface IItem {\n  count: number\n  name: string\n  defense?: number\n  damage?: number\n  slots: number\n}\ninterface IItemRowProps {\n  item: IItem\n}\n\nconst ItemRow: React.FC<IItemRowProps> = ({ item }) => {\n  const kebabCaseName = item.name.toLowerCase().split(\" \").join(\"-\")\n  return (\n    <tr data-testid={`${kebabCaseName}-row`} role=\"row\">\n      <td role=\"cell\">{item.name}</td>\n      <td role=\"cell\">{item.defense ? item.defense : \"-\"}</td>\n      <td role=\"cell\">{item.damage ? item.damage : \"-\"}</td>\n      <td role=\"cell\">{item.slots}</td>\n    </tr>\n  )\n}\n\nexport default Items\n","import React from \"react\"\nimport { Abilities, Shell } from \"./components\"\nimport Character from \"character_generation/Character\"\nimport { Subtitle, Title } from \"styled_components\"\nimport styled from \"styled-components\"\nimport Items from \"components/Items\"\n\nconst App: React.FC = () => {\n  const character = new Character()\n  character.generate()\n\n  return (\n    <Shell character={character}>\n      <Layout>\n        <Title>Knave</Title>\n        <Subtitle>Traits</Subtitle>\n        <Items />\n        <Abilities />\n      </Layout>\n    </Shell>\n  )\n}\n\nconst Layout = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 100vh;\n`\n\nLayout.displayName = \"Layout\"\n\nexport default App\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}