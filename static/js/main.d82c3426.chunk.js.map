{"version":3,"sources":["components/Abilities/Abilities.styles.ts","dice/Dice.ts","character_generation/Gear.ts","character_generation/Character.ts","context/CharacterContext.tsx","components/Abilities/Abilities.tsx","fonts/Sebaldus-Gotisch.woff","fonts/Sebaldus-Gotisch.woff2","fonts/fonts.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StyledTable","styled","table","displayName","Dice","roll","dieSize","numberOfDice","rolls","Array","fill","undefined","map","randomNumber","reduce","acc","curr","max","Math","floor","random","Gear","itemSlots","items","armor","getRandomArmor","getRandomItem","armorList","list","length","this","getRandomGear","dg","gearList","gen1","gen2","dungeoneeringGear","el","generalGear1","generalGear2","name","count","slots","type","Character","copperPieces","gender","level","maxHp","abilities","generate","generateAbilities","rollForCopperPieces","randomGender","constitution","defense","rollHitPoints","gear","rollAbilityScore","charisma","dexterity","intelligence","strength","wisdom","bonus","min","genders","quality","CharacterContext","React","createContext","character","AbilityRow","props","label","lowerCaseLabel","toLowerCase","role","Abilities","abilityScores","useContext","createGlobalStyle","SebaldusGotischWOFF","SebaldusGotischWOFF2","App","charContext","Provider","value","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d82c3426.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const StyledTable = styled.table`\n  border-collapse: collapse;\n  width: 100%;\n\n  caption {\n    font-family: SebaldusGotisch;\n    font-size: 2em;\n  }\n\n  thead tr {\n    background: black;\n    color: white;\n  }\n\n  thead th {\n    padding: 0.5em 0;\n  }\n\n  tr:nth-child(even) {\n    background: #dbdbdb;\n  }\n\n  td,\n  th {\n    padding: 0.5em 0;\n    text-align: center;\n  }\n`\n\nStyledTable.displayName = \"StyledTable\"\n","class Dice {\n  public static roll = (dieSize: number, numberOfDice: number = 1): number => {\n    const rolls = new Array(numberOfDice)\n      .fill(undefined)\n      .map(() => Dice.randomNumber(dieSize));\n\n    return rolls.reduce((acc, curr) => acc + curr, 0);\n  };\n\n  private static randomNumber = (max: number): number => {\n    return Math.floor(Math.random() * max + 1);\n  };\n}\n\nexport default Dice;\n","import * as armorList from \"character_generation/data/armor.json\";\nimport * as gearList from \"character_generation/data/gear.json\";\n\nclass Gear {\n  public itemSlots: number;\n  public items: IGear[];\n  public armor: IArmor;\n\n  constructor(itemSlots: number) {\n    this.itemSlots = itemSlots;\n    this.armor = this.getRandomArmor();\n    this.items = this.getRandomGear();\n  }\n\n  private getRandomArmor = (): IArmor => {\n    return this.getRandomItem(armorList.armor as IArmor[]);\n  };\n\n  private getRandomGear(): IGear[] {\n    const dg = gearList.dungeoneeringGear as IGear[];\n    const gen1 = gearList.generalGearSetOne as IGear[];\n    const gen2 = gearList.generalGearSetTwo as IGear[];\n\n    const startingGear: IGear[] = [\n      { name: \"rations\", count: 1, slots: 1, type: \"food\" },\n      { name: \"rations\", count: 1, slots: 1, type: \"food\" },\n    ];\n\n    const dungeoneeringGear: IGear[] = new Array(2)\n      .fill(undefined)\n      .map((el) => this.getRandomItem(dg));\n\n    const generalGear1 = this.getRandomItem(gen1);\n    const generalGear2 = this.getRandomItem(gen2);\n\n    // TODO: refactor so this isn't dependent on getRandomArmor being called first in the constructor\n    return [\n      ...startingGear,\n      ...dungeoneeringGear,\n      generalGear1,\n      generalGear2,\n      this.armor,\n    ];\n  }\n\n  private getRandomItem = <T>(list: T[]): T => {\n    const length = list.length;\n    const randomIndex = Math.floor(Math.random() * length);\n    return list[randomIndex];\n  };\n}\n\nexport default Gear;\n","import Dice from \"dice/Dice\";\nimport Gear from \"./Gear\";\n\nclass Character {\n  public armor: IArmor;\n  public copperPieces: number;\n  public gender: IGender;\n  public items: IGear[];\n  public itemSlots: number;\n  public level: number;\n  public maxHp: number;\n\n  private abilities: IAbilities;\n\n  constructor() {\n    this.abilities = {\n      charisma: { bonus: 3, defense: 13 },\n      constitution: { bonus: 3, defense: 13 },\n      dexterity: { bonus: 3, defense: 13 },\n      intelligence: { bonus: 3, defense: 13 },\n      strength: { bonus: 3, defense: 13 },\n      wisdom: { bonus: 3, defense: 13 },\n    };\n\n    this.armor = {\n      count: 0,\n      defense: 0,\n      name: \"\",\n      quality: 0,\n      slots: 0,\n      type: \"armor\",\n    };\n    this.copperPieces = 0;\n    this.gender = \"non-binary\";\n    this.items = [{ name: \"\", count: 0, type: \"food\", slots: 0 }];\n    this.itemSlots = 0;\n    this.level = 0;\n    this.maxHp = 0;\n  }\n\n  public generate = (): void => {\n    this.level = 1;\n    this.abilities = this.generateAbilities();\n    this.copperPieces = this.rollForCopperPieces();\n    this.gender = this.randomGender();\n    this.itemSlots = this.constitution.defense;\n    this.maxHp = this.rollHitPoints();\n\n    const gear = new Gear(this.itemSlots);\n\n    this.items = gear.items;\n    this.armor = gear.armor;\n  };\n\n  public get abilityScores() {\n    return this.abilities;\n  }\n\n  public get charisma() {\n    return this.abilities.charisma;\n  }\n\n  public get constitution() {\n    return this.abilities.constitution;\n  }\n\n  public get dexterity() {\n    return this.abilities.dexterity;\n  }\n\n  public get intelligence() {\n    return this.abilities.intelligence;\n  }\n\n  public get strength() {\n    return this.abilities.strength;\n  }\n\n  public get wisdom() {\n    return this.abilities.wisdom;\n  }\n\n  // END PUBLIC METHODS\n\n  private rollForCopperPieces = () => {\n    return Dice.roll(6, 3) + 20;\n  };\n\n  private rollHitPoints = () => {\n    return Dice.roll(8);\n  };\n\n  private generateAbilities = (): IAbilities => {\n    const [charisma, constitution, dexterity, intelligence, strength, wisdom] =\n      Array(6).fill(undefined).map(this.rollAbilityScore);\n\n    const abilities = {\n      charisma: { bonus: charisma, defense: charisma + 10 },\n      constitution: { bonus: constitution, defense: constitution + 10 },\n      dexterity: { bonus: dexterity, defense: dexterity + 10 },\n      intelligence: { bonus: intelligence, defense: intelligence + 10 },\n      strength: { bonus: strength, defense: strength + 10 },\n      wisdom: { bonus: wisdom, defense: wisdom + 10 },\n    };\n\n    return abilities;\n  };\n\n  private rollAbilityScore = (): number => {\n    const rolls = new Array(3).fill(undefined).map(() => Dice.roll(6));\n    return Math.min(...rolls);\n  };\n\n  private randomGender = (): IGender => {\n    const genders: IGender[] = [\n      \"cis-male\",\n      \"cis-female\",\n      \"non-binary\",\n      \"transgender\",\n      \"two-spirit\",\n      \"genderqueer\",\n      \"gender-fluid\",\n      \"gender-neutral\",\n    ];\n\n    // TODO: Use `getRandomItem` (currently in gear class. move to utils?)\n    return genders[Math.floor(Math.random() * genders.length)];\n  };\n}\n\nexport default Character;\n","import React from \"react\";\nimport Character from \"character_generation/Character\";\n\nexport interface ICharacterContext {\n  character: Character;\n}\n\nconst CharacterContext = React.createContext<ICharacterContext>({\n  character: new Character(),\n});\n\nexport default CharacterContext;\n","import React from \"react\"\nimport { StyledTable } from \"./Abilities.styles\"\nimport CharacterContext from \"context/CharacterContext\"\n\nconst Abilities: React.FC = () => {\n  const context = React.useContext(CharacterContext)\n  const { character } = context\n  const abilityScores: IAbilities = character.abilityScores\n\n  const { charisma, constitution, dexterity, intelligence, strength, wisdom } =\n    abilityScores\n\n  return (\n    <StyledTable>\n      <caption>Abilities</caption>\n      <thead>\n        <tr role=\"row\">\n          <th role=\"cell\">Defense</th>\n          <th role=\"cell\">Ability</th>\n          <th role=\"cell\">Bonus</th>\n        </tr>\n      </thead>\n      <tbody>\n        <AbilityRow\n          label=\"STR\"\n          bonus={strength.bonus}\n          defense={strength.defense}\n        />\n        <AbilityRow\n          label=\"DEX\"\n          bonus={dexterity.bonus}\n          defense={dexterity.defense}\n        />\n        <AbilityRow\n          label=\"CON\"\n          bonus={constitution.bonus}\n          defense={constitution.defense}\n        />\n        <AbilityRow\n          label=\"INT\"\n          bonus={intelligence.bonus}\n          defense={intelligence.defense}\n        />\n        <AbilityRow label=\"WIS\" bonus={wisdom.bonus} defense={wisdom.defense} />\n        <AbilityRow\n          label=\"CHA\"\n          bonus={charisma.bonus}\n          defense={charisma.defense}\n        />\n      </tbody>\n    </StyledTable>\n  )\n}\n\ninterface IAbilityRowProps {\n  defense: number\n  label: string\n  bonus: number\n}\n\nconst AbilityRow = (props: IAbilityRowProps) => {\n  const { bonus, defense, label } = props\n  const lowerCaseLabel = label.toLowerCase()\n\n  return (\n    <tr data-testid={`${lowerCaseLabel}-row`} role=\"row\">\n      <td role=\"cell\">{defense}</td>\n      <th role=\"cell\">{label}</th>\n      <td role=\"cell\">{bonus}</td>\n    </tr>\n  )\n}\n\nexport default Abilities\n","export default __webpack_public_path__ + \"static/media/Sebaldus-Gotisch.b7fba9af.woff\";","export default __webpack_public_path__ + \"static/media/Sebaldus-Gotisch.4bb1e1aa.woff2\";","import { createGlobalStyle } from \"styled-components\"\n\nimport SebaldusGotischWOFF from \"./Sebaldus-Gotisch.woff\"\nimport SebaldusGotischWOFF2 from \"./Sebaldus-Gotisch.woff2\"\n\nexport default createGlobalStyle`\n    @font-face {\n        font-family: 'SebaldusGotisch';\n        src: local('SebaldusGotisch'), local('SebaldusGotisch'),\n        url(${SebaldusGotischWOFF}) format('woff2'),\n        url(${SebaldusGotischWOFF2}) format('woff');\n        font-weight: 300;\n        font-style: normal;\n    }\n`\n","import React from \"react\"\nimport { Abilities } from \"./components\"\nimport CharacterContext, { ICharacterContext } from \"context/CharacterContext\"\nimport Character from \"character_generation/Character\"\nimport GlobalFonts from \"./fonts/fonts\"\n\nconst App: React.FC = () => {\n  const character = new Character()\n  character.generate()\n\n  const charContext: ICharacterContext = {\n    character,\n  }\n\n  return (\n    <CharacterContext.Provider value={charContext}>\n      <div className=\"App\">\n        <GlobalFonts />\n        <Abilities />\n      </div>\n    </CharacterContext.Provider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}